package(default_visibility = ["//visibility:public"])

cc_library(
    name = "numerical",
    srcs = glob(
        ["src/numerical/**/*.cpp"],
    ),
    hdrs = glob(
        [
            "include/geometrycentral/numerical/**/*.h",
            "include/geometrycentral/numerical/**/*.ipp",
        ],
    ),
    strip_include_prefix = "include",
    deps = [
        ":utilities",
        ":vector",
        "@eigen",
    ],
)

cc_library(
    name = "surface",
    srcs = glob(
        ["src/surface/**/*.cpp"],
        exclude = [
            "src/surface/detect_symmetry.cpp",
            "src/surface/mesh_ray_tracer.cpp",
        ],
    ),
    hdrs = glob(
        [
            "include/geometrycentral/surface/**/*.h",
            "include/geometrycentral/surface/**/*.ipp",
            "include/geometrycentral/utilities/mesh_data.h",
        ],
    ),
    strip_include_prefix = "include",
    deps = [
        ":dependent_quantity",
        ":element",
        ":elementary_geometry",
        ":mesh_data",
        ":numerical",
        ":utilities",
        ":utilities_lib",
        "//deps/nanoflann",
        "//deps/nanort",
        "@eigen",
        "@happly",
    ],
)

cc_library(
    name = "pointcloud",
    srcs = glob(
        ["src/pointcloud/**/*.cpp"],
    ),
    hdrs = glob(
        [
            "include/geometrycentral/pointcloud/**/*.h",
            "include/geometrycentral/pointcloud/**/*.ipp",
        ],
    ),
    strip_include_prefix = "include",
    deps = [
        ":mesh_data",
        ":numerical",
        ":surface",
        ":utilities_lib",
        "@eigen",
        "@happly",
    ],
)

cc_library(
    name = "utilities",
    srcs = ["src/utilities/utilities.cpp"],
    hdrs = ["include/geometrycentral/utilities/utilities.h"],
    strip_include_prefix = "include",
)

cc_library(
    name = "element",
    hdrs = [
        "include/geometrycentral/utilities/element.h",
        "include/geometrycentral/utilities/element.ipp",
        "include/geometrycentral/utilities/element_iterators.h",
        "include/geometrycentral/utilities/element_iterators.ipp",
    ],
    strip_include_prefix = "include",
)

cc_library(
    name = "combining_hash_functions",
    hdrs = [
        "include/geometrycentral/utilities/combining_hash_functions.h",
    ],
    strip_include_prefix = "include",
)

cc_library(
    name = "dependent_quantity",
    hdrs = [
        "include/geometrycentral/utilities/dependent_quantity.h",
        "include/geometrycentral/utilities/dependent_quantity.ipp",
    ],
    strip_include_prefix = "include",
)

cc_library(
    name = "elementary_geometry",
    hdrs = [
        "include/geometrycentral/utilities/elementary_geometry.h",
        "include/geometrycentral/utilities/elementary_geometry.ipp",
    ],
    strip_include_prefix = "include",
    deps = [
        ":vector",
    ],
)

cc_library(
    name = "mesh_data",
    hdrs = [
        "include/geometrycentral/surface/halfedge_element_types.h",
        "include/geometrycentral/utilities/mesh_data.h",
        "include/geometrycentral/utilities/mesh_data.ipp",
    ],
    strip_include_prefix = "include",
    deps = [
        #  ":surface",
    ],
)

cc_library(
    name = "vector",
    hdrs = [
        "include/geometrycentral/utilities/vector2.h",
        "include/geometrycentral/utilities/vector2.ipp",
        "include/geometrycentral/utilities/vector3.h",
        "include/geometrycentral/utilities/vector3.ipp",
    ],
    strip_include_prefix = "include",
    deps = [
        ":utilities",
    ],
)

cc_library(
    name = "utilities_lib",
    srcs = glob(
        ["src/utilities/**/*.cpp"],
        exclude = [
            "src/utilities/unit_vector3.cpp",
            "src/utilities/utilities.cpp",
        ],
    ),
    hdrs = glob(
        [
            "include/geometrycentral/utilities/**/*.h",
            "include/geometrycentral/utilities/**/*.ipp",
        ],
    ),
    strip_include_prefix = "include",
    deps = [
        "//deps/nanoflann",
        "@eigen",
    ],
)
